
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "startBREAK CONTINUE EQ_OP FLOAT FLOAT_N FUNCTION IDENTIFIER IF INT INT_N PRINT RETURN STRING STRING_LITERAL WHILEstart : body_programm\n             | function_declaration_list body_programmfunction_declaration_list : function\n                                 | function_declaration_list functionbody_programm : identifier_list compound_statementidentifier_list : identifier\n                       | identifier_list ';' identifieridentifier : type declaration_listtype : INTtype : FLOATtype : STRINGdeclaration_list : IDENTIFIER\n                        | declaration_list ',' IDENTIFIER function : FUNCTION IDENTIFIER '(' identifier_list ')' '{' function_statement_list '}'\n                | FUNCTION IDENTIFIER '(' identifier_list ')' '{' identifier_list function_statement_list '}'\n                 function_calling : IDENTIFIER '(' arguments ')' arguments : argument\n                 | arguments ',' argumentargument : IDENTIFIERargument : INT_Nargument : FLOAT_Nargument : '(' expression ')' compound_statement : '{' statement_list '}' statement_list : statement\n                      | statement_list ';' statementstatement : assigment_statement\n                 | print_statement\n                 | while_statement\n                 | if_statementstatement_list_if : statement_if\n                         | statement_list_if ';' statement_ifstatement_if : if_statement\n                    | assigment_statement\n                    | print_statement\n                    | while_statement\n                    | CONTINUE\n                    | BREAKfunction_statement_list : function_statement\n                               | function_statement_list ';' function_statementfunction_statement : if_statement\n                          | assigment_statement\n                          | print_statement\n                          | while_statement\n                          | return_statementreturn_statement : RETURN expressionassigment_statement : IDENTIFIER '=' expression\n                           | IDENTIFIER '=' STRING_LITERALexpression : multiplication\n                  | expression  '+' multiplication\n                  | expression  '-' multiplicationmultiplication : item\n                      | multiplication '*' item\n                      | multiplication '/' item item : function_calling\n            | IDENTIFIER\n            | INT_N\n            | FLOAT_N\n            | '(' expression ')' print_statement : PRINT '(' expression ')'\n                       | PRINT '(' STRING_LITERAL ')' if_statement : IF logical_expression '{' statement_list_if '}' while_statement : WHILE logical_expression '{' statement_list '}' logical_expression : logical_or_expression\n                          | '!' logical_or_expressionlogical_or_expression : logical_and_expression\n                             | logical_or_expression '|' logical_and_expression\n                          logical_and_expression : logical_and_expression '&' boolean\n                              | booleanboolean : '(' expression EQ_OP expression ')'\n               | '(' expression '>' expression ')'\n               | '(' expression '<' expression ')'  "
    
_lr_action_items = {'FUNCTION':([0,3,5,13,122,127,],[7,7,-3,-4,-14,-15,]),'INT':([0,3,5,13,15,31,87,122,127,],[9,9,-3,-4,9,9,9,-14,-15,]),'FLOAT':([0,3,5,13,15,31,87,122,127,],[10,10,-3,-4,10,10,10,-14,-15,]),'STRING':([0,3,5,13,15,31,87,122,127,],[11,11,-3,-4,11,11,11,-14,-15,]),'$end':([1,2,12,14,33,],[0,-1,-2,-5,-23,]),';':([4,6,18,19,20,21,22,23,24,25,26,44,45,46,47,48,49,50,51,52,53,54,71,72,73,79,80,81,82,83,84,85,86,94,95,96,97,98,99,103,105,106,107,108,109,110,111,112,115,120,121,124,128,],[15,-6,-8,-12,-7,34,-24,-26,-27,-28,-29,15,-13,-25,-55,-46,-47,-48,-51,-54,-56,-57,-59,-60,34,104,-30,-32,-33,-34,-35,-36,-37,-49,-50,-52,-53,-58,-62,-61,15,123,-38,-40,-41,-42,-43,-44,-16,-31,123,-45,-39,]),'{':([4,6,18,19,20,37,38,40,41,43,45,60,64,74,75,117,118,119,],[16,-6,-8,-12,-7,58,-63,-65,-68,63,-13,-64,87,-66,-67,-69,-70,-71,]),')':([6,18,19,20,44,45,47,50,51,52,53,54,56,57,70,88,90,91,92,93,94,95,96,97,98,100,101,102,114,115,125,126,],[-6,-8,-12,-7,64,-13,-55,-48,-51,-54,-56,-57,71,72,98,-19,115,-17,-20,-21,-49,-50,-52,-53,-58,117,118,119,125,-16,-22,-18,]),'IF':([6,16,18,19,20,34,45,58,63,87,104,105,123,],[-6,30,-8,-12,-7,30,-13,30,30,30,30,30,30,]),'IDENTIFIER':([6,7,8,9,10,11,16,18,19,20,32,34,35,36,42,45,55,58,63,65,66,67,68,69,76,77,78,87,89,104,105,113,116,123,],[-6,17,19,-9,-10,-11,27,-8,-12,-7,45,27,47,47,47,-13,47,27,27,88,47,47,47,47,47,47,47,27,47,27,27,47,88,27,]),'PRINT':([6,16,18,19,20,34,45,58,63,87,104,105,123,],[-6,28,-8,-12,-7,28,-13,28,28,28,28,28,28,]),'WHILE':([6,16,18,19,20,34,45,58,63,87,104,105,123,],[-6,29,-8,-12,-7,29,-13,29,29,29,29,29,29,]),'RETURN':([6,18,19,20,45,87,105,123,],[-6,-8,-12,-7,-13,113,113,113,]),'(':([17,28,29,30,35,36,39,42,47,55,59,61,65,66,67,68,69,76,77,78,89,113,116,],[31,36,42,42,55,55,42,55,65,55,42,42,89,55,55,55,55,55,55,55,55,55,89,]),',':([18,19,45,88,90,91,92,93,125,126,],[32,-12,-13,-19,116,-17,-20,-21,-22,-18,]),'}':([21,22,23,24,25,26,46,47,48,49,50,51,52,53,54,71,72,73,79,80,81,82,83,84,85,86,94,95,96,97,98,99,103,106,107,108,109,110,111,112,115,120,121,124,128,],[33,-24,-26,-27,-28,-29,-25,-55,-46,-47,-48,-51,-54,-56,-57,-59,-60,99,103,-30,-32,-33,-34,-35,-36,-37,-49,-50,-52,-53,-58,-62,-61,122,-38,-40,-41,-42,-43,-44,-16,-31,127,-45,-39,]),'=':([27,],[35,]),'!':([29,30,],[39,39,]),'STRING_LITERAL':([35,36,],[49,57,]),'INT_N':([35,36,42,55,65,66,67,68,69,76,77,78,89,113,116,],[53,53,53,53,92,53,53,53,53,53,53,53,53,53,92,]),'FLOAT_N':([35,36,42,55,65,66,67,68,69,76,77,78,89,113,116,],[54,54,54,54,93,54,54,54,54,54,54,54,54,54,93,]),'|':([38,40,41,60,74,75,117,118,119,],[59,-65,-68,59,-66,-67,-69,-70,-71,]),'&':([40,41,74,75,117,118,119,],[61,-68,61,-67,-69,-70,-71,]),'*':([47,50,51,52,53,54,94,95,96,97,98,115,],[-55,68,-51,-54,-56,-57,68,68,-52,-53,-58,-16,]),'/':([47,50,51,52,53,54,94,95,96,97,98,115,],[-55,69,-51,-54,-56,-57,69,69,-52,-53,-58,-16,]),'+':([47,48,50,51,52,53,54,56,62,70,94,95,96,97,98,100,101,102,114,115,124,],[-55,66,-48,-51,-54,-56,-57,66,66,66,-49,-50,-52,-53,-58,66,66,66,66,-16,66,]),'-':([47,48,50,51,52,53,54,56,62,70,94,95,96,97,98,100,101,102,114,115,124,],[-55,67,-48,-51,-54,-56,-57,67,67,67,-49,-50,-52,-53,-58,67,67,67,67,-16,67,]),'EQ_OP':([47,50,51,52,53,54,62,94,95,96,97,98,115,],[-55,-48,-51,-54,-56,-57,76,-49,-50,-52,-53,-58,-16,]),'>':([47,50,51,52,53,54,62,94,95,96,97,98,115,],[-55,-48,-51,-54,-56,-57,77,-49,-50,-52,-53,-58,-16,]),'<':([47,50,51,52,53,54,62,94,95,96,97,98,115,],[-55,-48,-51,-54,-56,-57,78,-49,-50,-52,-53,-58,-16,]),'CONTINUE':([63,104,],[85,85,]),'BREAK':([63,104,],[86,86,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'body_programm':([0,3,],[2,12,]),'function_declaration_list':([0,],[3,]),'identifier_list':([0,3,31,87,],[4,4,44,105,]),'function':([0,3,],[5,13,]),'identifier':([0,3,15,31,87,],[6,6,20,6,6,]),'type':([0,3,15,31,87,],[8,8,8,8,8,]),'compound_statement':([4,],[14,]),'declaration_list':([8,],[18,]),'statement_list':([16,58,],[21,73,]),'statement':([16,34,58,],[22,46,22,]),'assigment_statement':([16,34,58,63,87,104,105,123,],[23,23,23,82,109,82,109,109,]),'print_statement':([16,34,58,63,87,104,105,123,],[24,24,24,83,110,83,110,110,]),'while_statement':([16,34,58,63,87,104,105,123,],[25,25,25,84,111,84,111,111,]),'if_statement':([16,34,58,63,87,104,105,123,],[26,26,26,81,108,81,108,108,]),'logical_expression':([29,30,],[37,43,]),'logical_or_expression':([29,30,39,],[38,38,60,]),'logical_and_expression':([29,30,39,59,],[40,40,40,74,]),'boolean':([29,30,39,59,61,],[41,41,41,41,75,]),'expression':([35,36,42,55,76,77,78,89,113,],[48,56,62,70,100,101,102,114,124,]),'multiplication':([35,36,42,55,66,67,76,77,78,89,113,],[50,50,50,50,94,95,50,50,50,50,50,]),'item':([35,36,42,55,66,67,68,69,76,77,78,89,113,],[51,51,51,51,51,51,96,97,51,51,51,51,51,]),'function_calling':([35,36,42,55,66,67,68,69,76,77,78,89,113,],[52,52,52,52,52,52,52,52,52,52,52,52,52,]),'statement_list_if':([63,],[79,]),'statement_if':([63,104,],[80,120,]),'arguments':([65,],[90,]),'argument':([65,116,],[91,126,]),'function_statement_list':([87,105,],[106,121,]),'function_statement':([87,105,123,],[107,107,128,]),'return_statement':([87,105,123,],[112,112,112,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> body_programm','start',1,'p_start','ParserCompiller.py',14),
  ('start -> function_declaration_list body_programm','start',2,'p_start','ParserCompiller.py',15),
  ('function_declaration_list -> function','function_declaration_list',1,'p_function_declaration_list','ParserCompiller.py',21),
  ('function_declaration_list -> function_declaration_list function','function_declaration_list',2,'p_function_declaration_list','ParserCompiller.py',22),
  ('body_programm -> identifier_list compound_statement','body_programm',2,'p_body_programm','ParserCompiller.py',28),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','ParserCompiller.py',31),
  ('identifier_list -> identifier_list ; identifier','identifier_list',3,'p_identifier_list','ParserCompiller.py',32),
  ('identifier -> type declaration_list','identifier',2,'p_identifier','ParserCompiller.py',38),
  ('type -> INT','type',1,'p_type_1','ParserCompiller.py',42),
  ('type -> FLOAT','type',1,'p_type_2','ParserCompiller.py',46),
  ('type -> STRING','type',1,'p_type_3','ParserCompiller.py',50),
  ('declaration_list -> IDENTIFIER','declaration_list',1,'p_declaration_list','ParserCompiller.py',54),
  ('declaration_list -> declaration_list , IDENTIFIER','declaration_list',3,'p_declaration_list','ParserCompiller.py',55),
  ('function -> FUNCTION IDENTIFIER ( identifier_list ) { function_statement_list }','function',8,'p_function','ParserCompiller.py',62),
  ('function -> FUNCTION IDENTIFIER ( identifier_list ) { identifier_list function_statement_list }','function',9,'p_function','ParserCompiller.py',63),
  ('function_calling -> IDENTIFIER ( arguments )','function_calling',4,'p_function_calling','ParserCompiller.py',70),
  ('arguments -> argument','arguments',1,'p_arguments','ParserCompiller.py',73),
  ('arguments -> arguments , argument','arguments',3,'p_arguments','ParserCompiller.py',74),
  ('argument -> IDENTIFIER','argument',1,'p_argument_1','ParserCompiller.py',80),
  ('argument -> INT_N','argument',1,'p_argument_2','ParserCompiller.py',83),
  ('argument -> FLOAT_N','argument',1,'p_argument_3','ParserCompiller.py',86),
  ('argument -> ( expression )','argument',3,'p_argument_4','ParserCompiller.py',89),
  ('compound_statement -> { statement_list }','compound_statement',3,'p_compound_statement','ParserCompiller.py',92),
  ('statement_list -> statement','statement_list',1,'p_statement_list','ParserCompiller.py',95),
  ('statement_list -> statement_list ; statement','statement_list',3,'p_statement_list','ParserCompiller.py',96),
  ('statement -> assigment_statement','statement',1,'p_statement','ParserCompiller.py',102),
  ('statement -> print_statement','statement',1,'p_statement','ParserCompiller.py',103),
  ('statement -> while_statement','statement',1,'p_statement','ParserCompiller.py',104),
  ('statement -> if_statement','statement',1,'p_statement','ParserCompiller.py',105),
  ('statement_list_if -> statement_if','statement_list_if',1,'p_statement_list_if','ParserCompiller.py',108),
  ('statement_list_if -> statement_list_if ; statement_if','statement_list_if',3,'p_statement_list_if','ParserCompiller.py',109),
  ('statement_if -> if_statement','statement_if',1,'p_statement_if','ParserCompiller.py',115),
  ('statement_if -> assigment_statement','statement_if',1,'p_statement_if','ParserCompiller.py',116),
  ('statement_if -> print_statement','statement_if',1,'p_statement_if','ParserCompiller.py',117),
  ('statement_if -> while_statement','statement_if',1,'p_statement_if','ParserCompiller.py',118),
  ('statement_if -> CONTINUE','statement_if',1,'p_statement_if','ParserCompiller.py',119),
  ('statement_if -> BREAK','statement_if',1,'p_statement_if','ParserCompiller.py',120),
  ('function_statement_list -> function_statement','function_statement_list',1,'p_function_statement_list','ParserCompiller.py',123),
  ('function_statement_list -> function_statement_list ; function_statement','function_statement_list',3,'p_function_statement_list','ParserCompiller.py',124),
  ('function_statement -> if_statement','function_statement',1,'p_function_statement','ParserCompiller.py',130),
  ('function_statement -> assigment_statement','function_statement',1,'p_function_statement','ParserCompiller.py',131),
  ('function_statement -> print_statement','function_statement',1,'p_function_statement','ParserCompiller.py',132),
  ('function_statement -> while_statement','function_statement',1,'p_function_statement','ParserCompiller.py',133),
  ('function_statement -> return_statement','function_statement',1,'p_function_statement','ParserCompiller.py',134),
  ('return_statement -> RETURN expression','return_statement',2,'p_return_statement','ParserCompiller.py',137),
  ('assigment_statement -> IDENTIFIER = expression','assigment_statement',3,'p_assigment_statement','ParserCompiller.py',140),
  ('assigment_statement -> IDENTIFIER = STRING_LITERAL','assigment_statement',3,'p_assigment_statement','ParserCompiller.py',141),
  ('expression -> multiplication','expression',1,'p_expression','ParserCompiller.py',144),
  ('expression -> expression + multiplication','expression',3,'p_expression','ParserCompiller.py',145),
  ('expression -> expression - multiplication','expression',3,'p_expression','ParserCompiller.py',146),
  ('multiplication -> item','multiplication',1,'p_multiplication','ParserCompiller.py',152),
  ('multiplication -> multiplication * item','multiplication',3,'p_multiplication','ParserCompiller.py',153),
  ('multiplication -> multiplication / item','multiplication',3,'p_multiplication','ParserCompiller.py',154),
  ('item -> function_calling','item',1,'p_item','ParserCompiller.py',160),
  ('item -> IDENTIFIER','item',1,'p_item','ParserCompiller.py',161),
  ('item -> INT_N','item',1,'p_item','ParserCompiller.py',162),
  ('item -> FLOAT_N','item',1,'p_item','ParserCompiller.py',163),
  ('item -> ( expression )','item',3,'p_item','ParserCompiller.py',164),
  ('print_statement -> PRINT ( expression )','print_statement',4,'p_print_statement','ParserCompiller.py',170),
  ('print_statement -> PRINT ( STRING_LITERAL )','print_statement',4,'p_print_statement','ParserCompiller.py',171),
  ('if_statement -> IF logical_expression { statement_list_if }','if_statement',5,'p_if_statement','ParserCompiller.py',174),
  ('while_statement -> WHILE logical_expression { statement_list }','while_statement',5,'p_while_statement','ParserCompiller.py',177),
  ('logical_expression -> logical_or_expression','logical_expression',1,'p_logical_expression','ParserCompiller.py',180),
  ('logical_expression -> ! logical_or_expression','logical_expression',2,'p_logical_expression','ParserCompiller.py',181),
  ('logical_or_expression -> logical_and_expression','logical_or_expression',1,'p_logical_or_expression','ParserCompiller.py',187),
  ('logical_or_expression -> logical_or_expression | logical_and_expression','logical_or_expression',3,'p_logical_or_expression','ParserCompiller.py',188),
  ('logical_and_expression -> logical_and_expression & boolean','logical_and_expression',3,'p_logical_and_expression','ParserCompiller.py',195),
  ('logical_and_expression -> boolean','logical_and_expression',1,'p_logical_and_expression','ParserCompiller.py',196),
  ('boolean -> ( expression EQ_OP expression )','boolean',5,'p_boolean','ParserCompiller.py',202),
  ('boolean -> ( expression > expression )','boolean',5,'p_boolean','ParserCompiller.py',203),
  ('boolean -> ( expression < expression )','boolean',5,'p_boolean','ParserCompiller.py',204),
]
